apply plugin: 'war'
def libs = rootProject.ext.libraries
dependencies {
    compile project(':ssm-interface')
    /*providedCompile:war插件提供的范围类型,与compile作用类似,但不会被添加到最终的war包中
    这是由于编译、测试阶段代码需要依赖此类jar包，而运行阶段容器已经提供了相应的支持，
    所以无需将这些文件打入到war包中了;例如Servlet API就是一个很明显的例子.*/
    providedCompile(
            //JSP相关
            libs["servlet-api"],
            libs["jsp-api"],
    )
    compile(
            libs["jstl"],
            libs["standard"],
            //spring
            libs["spring-beans"],
            libs["spring-context"],
            libs["spring-core"],
            libs["spring-expression"],
            libs["spring-web"],
            libs["spring-aop"],
            libs["spring-aspects"],
            libs["aopalliance"],
            libs["aspectjweaver"],
            libs["spring-jdbc"],
            libs["spring-tx"],
            libs["spring-context-support"],
            libs["spring-orm"],
            libs["spring-oxm"],
            libs["spring-webmvc"],
            libs["spring-jms"],
            libs["spring-websocket"],
            libs["spring-messaging"],
            libs["spring-test"],
            //mybatis分页插件,不依赖可能会报错,但不影响使用
            libs["pagehelper"],
            //dubbo资源调度和治理中心的管理工具
            libs["dubbo"],
            libs["zookeeper"],
            libs["zkclient"],
            libs["apache-curator-recipes"],
            libs["apache-curator-framework"],
            libs["apache-curator-client"],
            //文件上传
            libs["commons-fileupload"],
    )
}
/*主机与端口：一般形式是 hostname:port，如果 port 是80，可以省略。
    资源路径：就是 /path/to/xxx 这样的形式，最简单的路径就是 / 。
    根据 HTTP 协议，如果没有指定路径，则就等同于指定了 / 这样的路径。
*/
/*tomcat {
    httpPort = 8090
    ajpPort = 8020
    stopPort = 8090
    //httpsPort = 8443
    //enableSSL = true
    //contextPath默认为项目名
    //contextPath = '/'
    // httpProtocol：要使用的HTTP协议处理程序类名称
    httpProtocol = 'org.apache.coyote.http11.Http11Nio2Protocol'
    //ajpProtocol：要使用的AJP协议处理程序类名称
    ajpProtocol = 'org.apache.coyote.ajp.AjpNio2Protocol'
}*/

