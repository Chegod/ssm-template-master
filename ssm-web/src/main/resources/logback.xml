<?xml version="1.0" encoding="UTF-8"?>
<!--scan：当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod：设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug：当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。-->
<configuration>
    <!-- 尽量别用绝对路径，如果带参数不同容器路径解释可能不同,以下配置参数在pom.xml里 -->
    <!-- 定义日志的根目录,
    value=“logs”,表示保存项目的目录下
    value=“/logs”,表示保存到系统目录 ，windows系统下载 D:\logs，
    value=“../logs”,表示保存到项目的父目录 -->
    <property name="log.root.level" value="INFO" /> <!-- 日志级别，TRACE < DEBUG < INFO < WARN < ERROR  -->
    <property name="log.other.level" value="INFO" /> <!-- 其他日志级别 -->
    <property name="log.base" value="logs" /> <!-- 日志路径，这里是相对路径，web项目eclipse下会输出到eclipse的安装目录下，如果部署到linux上的tomcat下，会输出到tomcat/bin目录 下 -->
    <property name="log.moduleName" value="ssm-web" />  <!-- 模块名称，影响日志配置名，日志文件名 -->
    <property name="log.max.history" value="365" />  <!-- 只保存最近365天的文件 -->
    <property name="log.max.size" value="100MB" /> <!-- 一个日志文件的大小,超过这个大小将被压缩 -->
    <property name="log.total.size" value="10GB" /> <!-- 所有日志文件的大小-->

    <!-- ch.qos.logback.core.ConsoleAppender 表示控制台输出 -->
    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <!--日志输出格式：%d表示日期时间，%thread表示线程名，%-5level：级别从左显示5个字符宽度
            %logger{50} 表示logger名字最长50个字符，否则按照句点分割。 %msg：日志消息，%n是换行符-->
        <encoder>
            <Pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} %-5level[%thread]%logger{56}.%method\(\):%L -%msg%n</Pattern>
        </encoder>
    </appender>

    <!-- 用来保存输出所有级别的日志 -->
    <appender name="file.all" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 设置日志不超过${log.max.size}时的保存路径，注意如果是web项目会保存到Tomcat的bin目录下 -->
        <File>${log.base}/${log.moduleName}.log</File>
        <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--滚动时产生的文件的存放位置及文件名称 %d{yyyy-MM-dd}：按天进行日志滚动
                %i：当文件大小超过maxFileSize时，按照i进行文件滚动-->
            <FileNamePattern>${log.base}/archive/${log.moduleName}_all_%d{yyyy-MM-dd}.%i.log.zip</FileNamePattern>
            <!-- 文件输出日志 (文件大小策略进行文件输出，超过指定大小对文件备份) -->
            <!--可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。假设设置每天滚动，
            且maxHistory是365，则只保存最近365天的文件，删除之前的旧文件。注意，删除旧文件是，
            那些为了归档而创建的目录也会被删除。-->
            <MaxHistory>${log.max.history}</MaxHistory>
            <!--当日志文件超过maxFileSize指定的大小是，根据上面提到的%i进行日志文件滚动-->
            <maxFileSize>${log.max.size}</maxFileSize>
            <!--最多10GB-->
            <totalSizeCap>${log.total.size}</totalSizeCap>
        </rollingPolicy>
        <!--日志输出格式：%d表示日期时间，%thread表示线程名，%-5level：级别从左显示5个字符宽度
        %logger{50} 表示logger名字最长50个字符，否则按照句点分割。 %msg：日志消息，%n是换行符-->
        <encoder>
            <pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} %-5level[%thread]%logger{56}.%method\(\):%L -%msg%n</pattern>
        </encoder>
    </appender>

    <!-- 这也是用来保存输出所有级别的日志 -->
    <appender name="file.all.other" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <File>${log.base}/${log.moduleName}_other.log</File>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <FileNamePattern>${log.base}/archive/${log.moduleName}_other_%d{yyyy-MM-dd}.%i.log.zip</FileNamePattern>
            <MaxHistory>${log.max.history}</MaxHistory>
            <maxFileSize>${log.max.size}</maxFileSize>
            <totalSizeCap>${log.total.size}</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{56}.%method\(\):%L -%msg%n</pattern>
        </encoder>
    </appender>

    <!-- 只用保存输出error级别的日志 -->
    <appender name="file.error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <File>${log.base}/${log.moduleName}_err.log</File>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <FileNamePattern>${log.base}/archive/${log.moduleName}_err_%d{yyyy-MM-dd}.%i.log.zip</FileNamePattern>
            <MaxHistory>${log.max.history}</MaxHistory>
            <maxFileSize>${log.max.size}</maxFileSize>
            <totalSizeCap>${log.total.size}</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <pattern>%date{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{56}.%method\(\):%L - %msg%n</pattern>
        </encoder>
        <!-- 下面为配置只输出error级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
    <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
    <!-- 添加附加的appender,最多只能添加一个 -->
    <appender name="file.async" class="ch.qos.logback.classic.AsyncAppender">
        <discardingThreshold>0</discardingThreshold>
        <queueSize>256</queueSize>
        <includeCallerData>true</includeCallerData>
        <appender-ref ref="file.all" />
    </appender>

    <appender name="file.async.other" class="ch.qos.logback.classic.AsyncAppender">
        <discardingThreshold>0</discardingThreshold>
        <queueSize>256</queueSize>
        <includeCallerData>true</includeCallerData>
        <appender-ref ref="file.all.other" />
    </appender>

    <!--将控制指定name包下的所有类的日志的打印，通过level设置打印级别
   logger主要用于存放日志对象，也可以定义日志类型、级别
   name：表示匹配的logger类型前缀，也就是包的前半部分
   level：要记录的日志级别，包括 TRACE < DEBUG < INFO < WARN < ERROR
   additivity：作用在于children-logger是否使用 rootLogger配置的appender进行输出，
   false：表示只用当前logger的appender-ref，true：表示当前logger的appender-ref和rootLogger的appender-ref都有效 -->
    <!-- 为某个包下的所有类的指定Appender 这里也可以指定类名称例如：com.aa.bb.ClassName -->
    <logger name="pers.yipeng" additivity="false">
        <level value="${log.root.level}" />
        <appender-ref ref="stdout" />
        <!-- 即pers.yipeng包下级别为 ${log.root.level}的才会使用file.async来打印 -->
        <appender-ref ref="file.async" />
        <appender-ref ref="file.error" />
    </logger>

    <!--root与logger是父子关系，没有特别定义则默认为root，任何一个类只会和一个logger对应，
   要么是定义的logger，要么是root，判断的关键在于找到这个logger，然后判断这个logger的appender和level。-->
    <!-- root将级别为${log.root.level}及大于${log.root.level}的日志信息交给已经配置好的名为“Console”的appender处理，
    “Console”appender将信息打印到Console,其它同理 -->
    <root level="${log.root.level}">
        <appender-ref ref="stdout" /> <!--  标识这个appender将会添加到这个logger -->
        <appender-ref ref="file.async.other" />
        <appender-ref ref="file.error" />
    </root>
</configuration>
